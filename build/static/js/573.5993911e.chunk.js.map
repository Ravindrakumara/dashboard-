{"version":3,"file":"static/js/573.5993911e.chunk.js","mappings":"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","sources":["views/base/question/questionForm.jsx"],"sourcesContent":["/* eslint-disable */ \n\nimport  React,{useEffect,useState} from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CForm,CFormLabel,CFormInput,\n  CTable,\n  CTableBody,\n  CTableCaption,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CButton,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilPencil\n} from '@coreui/icons'\nimport apiService from 'src/service/apiService'\nconst options = [\n  {\n    label: \"English\",\n    value: \"English\",\n  },\n  {\n    label: \"Tamil\",\n    value: \"Tamil\",\n  },\n  {\n    label: \"Sinhala\",\n    value: \"Sinhala\",\n  }\n];\nfunction questionForm() {\n  const [questionData, setQuestionData] = useState([])\n  const [username,setUsername] = useState('')\n  const [form,setForm] = useState({\n    question:null,\n    place:null,\n    medium:null,\n    modifyDate:null,\n    createDate:null,\n    softdeleteDate:null,\n    createUser:null,\n    modifyUser:null,\n    softdeleteUser:null,\n    isdelete:null,\n  })\n\n  useEffect(()=> {fetchData();finduser()}, [])\n\n  const fetchData = async () => {\n    const queryString = window.location\n    const urlval = queryString.pathname\n    let str = urlval.slice(21,35) \n    let id = str.replace('/', '')\n    const x = await apiService.getAlterforquestion(id)\n    let datalist = x.data\n    setQuestionData(questionData.push(datalist))\n    alter()\n  }\n\n  const finduser = async() =>{\n    const respon = await apiService.getProfileInfo()\n    setUsername(respon.data.username)\n  }\n\n  const alter = ()=>{\n    form.question = questionData[0].question\n    form.place = questionData[0].place\n    form.medium = questionData[0].medium\n    form.modifyDate = questionData[0].modifyDate\n    form.createDate= questionData[0].createDate\n    form.softdeleteDate= questionData[0].softdeleteDate\n    form.createUser= questionData[0].createUser\n    form.modifyUser= username\n    form.softdeleteUser= questionData[0].softdeleteUser\n    form.isdelete= questionData[0].isdelete\n  }\n\n  const alterForm = async()=>{\n    const queryString = window.location\n    const urlval = queryString.pathname\n    let str = urlval.slice(21,35) \n    let id = str.replace('/', '')\n    const x = await apiService.alterform(form,id)\n  }\n  const resetForm = ()=>{\n    setForm(form.question = '')\n    form.place = ''\n    form.medium = ''\n    form.modifyDate = ''\n    form.createDate = ''\n    form.softdeleteDate = ''\n    form.createUser = ''\n    form.modifyUser = \"\"\n    form.softdeleteUser= ''\n    form.isdelete= ''\n  }\n  return (\n    <div>\n      <CRow>\n        {/* {questionData} */}\n       <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Alter Question</strong>\n          </CCardHeader>\n          <CCardBody>\n          <CForm >\n                <CRow>\n                    <CCol>\n                    <CFormLabel htmlFor=\"exampleFormControlInput1\">Question</CFormLabel>\n                    <CFormInput value={form.question} onChange={(e)=>setForm((question)=>({...question,question: e.target.value  }))} className=\"text-primary\"\n                        type=\"text\"\n                        placeholder=\"name@example.com\"\n                        size=\"sm\"\n                    />\n                    </CCol>\n                </CRow>\n                <CRow>\n                    <CCol>\n                    <CFormLabel htmlFor=\"exampleFormControlInput1\">Place</CFormLabel>\n                    <CFormInput value={form.place}  onChange={(e)=>setForm((question)=>({...question,place: e.target.value  }))}\n                        type=\"text\"\n                        placeholder=\"name@example.com\"\n                        size=\"sm\"\n                    />\n                    </CCol>\n                    <CCol>\n                    <CFormLabel htmlFor=\"exampleFormControlInput1\">Medium</CFormLabel>\n                    <CFormSelect value={form.medium} onChange={(e)=>setForm((question)=>({...question,medium: e.target.value  }))}>\n                      {options.map((option) => (\n                        <option value={option.value}>{option.label}</option>\n                      ))}\n                    </CFormSelect>\n                    </CCol>\n                </CRow>\n           </CForm> \n           &nbsp;    \n            <CRow>\n              <CCol>\n                 \n            </CCol>  \n            <CCol>\n                <CButton color='primary'  onClick={()=>{alterForm()}} size='sm'>Save</CButton> \n                &nbsp;\n                <CButton color='danger' onClick={()=>{resetForm()}} size='sm' >Reset</CButton> \n            </CCol>  \n            <CCol>\n                \n            </CCol>         \n            </CRow>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n    </div>\n  )\n}\n\nexport default questionForm"],"names":["options","label","value","useState","questionData","setQuestionData","username","setUsername","question","place","medium","modifyDate","createDate","softdeleteDate","createUser","modifyUser","softdeleteUser","isdelete","form","setForm","useEffect","fetchData","finduser","queryString","window","location","urlval","pathname","str","slice","id","replace","apiService","x","datalist","data","push","alter","respon","alterForm","xs","className","htmlFor","onChange","e","target","type","placeholder","size","map","option","color","onClick"],"sourceRoot":""}